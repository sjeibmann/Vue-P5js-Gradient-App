# .clinerules: Vue.js + P5.js Gradient Visualization App

## Project Intelligence

This file captures important patterns, preferences, and project intelligence that will help me work more effectively with this project. It will be updated as we discover new patterns and preferences throughout development.

## Code Style and Organization

### Vue Component Structure

- Use Vue 3 Composition API with `<script setup>` syntax
- Organize component files in the following order:
  1. `<script setup>` (imports, reactive state, computed props, lifecycle hooks, methods)
  2. `<template>` (component template)
  3. `<style>` (component styles)
- Use PascalCase for component names (e.g., `GradientCanvas.vue`)
- Use kebab-case for custom element names in templates (e.g., `<gradient-canvas>`)

### JavaScript/TypeScript Conventions

- Use ES6+ features (arrow functions, destructuring, etc.)
- Prefer `const` over `let` when variables won't be reassigned
- Use camelCase for variable and function names
- Use PascalCase for class and component names
- Add JSDoc comments for complex functions

### CSS/Styling Conventions

- Use scoped styles in Vue components
- Follow BEM naming convention for CSS classes
- Use CSS variables for theming and consistent values
- Implement responsive design with mobile-first approach

## File Organization

```
src/
├── assets/          # Static assets
├── components/      # Vue components
│   ├── ui/          # Generic UI components
│   └── gradient/    # Gradient-specific components
├── composables/     # Reusable composition functions
├── router/          # Vue Router configuration
├── stores/          # Pinia stores
│   └── gradient.js  # Gradient color steps and mesh configuration store
├── views/           # Page components
└── App.vue          # Root component
```

## Critical Implementation Paths

### P5.js Integration

- Always use P5.js in instance mode, not global mode
- Create and destroy P5 instances in sync with Vue component lifecycle
- Handle canvas resizing in the P5 `windowResized()` function
- Use a dedicated container element for the P5 canvas

```javascript
// Example pattern for P5.js integration
const canvasContainer = ref(null);
let p5Instance = null;

onMounted(() => {
  p5Instance = new p5(sketch, canvasContainer.value);
});

onUnmounted(() => {
  if (p5Instance) {
    p5Instance.remove();
  }
});
```

### State Management

- Use Pinia for global state management
- Structure stores by domain (gradient, mesh)
- Use the `persist` option for state that should survive page refreshes
- Watch store state in components to react to changes

```javascript
// Example pattern for store usage in components
import { useGradientStore } from '@/stores/gradient';
import { storeToRefs } from 'pinia';

const gradientStore = useGradientStore();
const { colorStops, meshRows, meshColumns, meshVisibility } = storeToRefs(gradientStore);

// Watch for changes to update P5 sketch
watch([colorStops, meshRows, meshColumns, meshVisibility], () => {
  // Update visualization
}, { deep: true });
```

### Mesh Gradient Implementation

The mesh gradient is implemented using a grid-based approach with rows and columns:

```javascript
// Mesh nodes data structure
interface MeshNode {
  id: number
  row: number
  col: number
  x: number
  y: number
  color: string
  manuallyMoved?: boolean
}

// Initialize mesh nodes
const initializeMeshNodes = () => {
  const newNodes = []
  const rows = meshRows.value
  const cols = meshColumns.value
  
  for (let row = 0; row < rows; row++) {
    for (let col = 0; col < cols; col++) {
      // Calculate normalized position (0-1)
      const normalizedX = col / (cols - 1)
      const normalizedY = row / (rows - 1)
      
      // Calculate actual pixel position
      const x = normalizedX * width.value
      const y = normalizedY * height.value
      
      // Generate a color based on position
      const color = getColorForPosition(normalizedX, normalizedY)
      
      newNodes.push({
        id: row * cols + col,
        row,
        col,
        x,
        y,
        color
      })
    }
  }
  
  meshNodes.value = newNodes
}
```

The mesh gradient is rendered using triangles for smooth color blending:

```javascript
// Draw the mesh gradient using triangles
const drawMeshGradient = (p) => {
  if (meshNodes.value.length < 4) return
  
  // For each cell in the mesh grid (defined by 4 nodes), draw 2 triangles
  for (let row = 0; row < meshRows.value - 1; row++) {
    for (let col = 0; col < meshColumns.value - 1; col++) {
      // Get the 4 nodes that define this cell
      const topLeft = meshNodes.value.find(n => n.row === row && n.col === col)
      const topRight = meshNodes.value.find(n => n.row === row && n.col === col + 1)
      const bottomLeft = meshNodes.value.find(n => n.row === row + 1 && n.col === col)
      const bottomRight = meshNodes.value.find(n => n.row === row + 1 && n.col === col + 1)
      
      if (topLeft && topRight && bottomLeft && bottomRight) {
        // Draw first triangle (top-left, bottom-left, top-right)
        p.noStroke()
        p.beginShape(p.TRIANGLES)
        
        p.fill(p.color(topLeft.color))
        p.vertex(topLeft.x, topLeft.y)
        
        p.fill(p.color(bottomLeft.color))
        p.vertex(bottomLeft.x, bottomLeft.y)
        
        p.fill(p.color(topRight.color))
        p.vertex(topRight.x, topRight.y)
        
        p.endShape()
        
        // Draw second triangle (bottom-left, bottom-right, top-right)
        p.beginShape(p.TRIANGLES)
        
        p.fill(p.color(bottomLeft.color))
        p.vertex(bottomLeft.x, bottomLeft.y)
        
        p.fill(p.color(bottomRight.color))
        p.vertex(bottomRight.x, bottomRight.y)
        
        p.fill(p.color(topRight.color))
        p.vertex(topRight.x, topRight.y)
        
        p.endShape()
      }
    }
  }
}
```

### Event System

A custom event emitter is used for mesh node color updates:

```javascript
// Create a custom event bus for mesh node color updates
const emitter = mitt<{
  'update-mesh-node-color': { id: number; color: string }
}>()

// Listen for color update events
emitter.on('update-mesh-node-color', ({ id, color }) => {
  const node = meshNodes.value.find(n => n.id === id)
  if (node) {
    node.color = color
  }
})

// Expose the emitter to the parent component
defineExpose({ emitter })
```

### Color Management

- Support multiple color stops with position control
- Implement color blending with smoothness control
- Use P5.js `lerpColor()` for smooth color interpolation
- Optimize by pre-calculating values when possible

```javascript
// Example pattern for color interpolation with multiple stops
function interpolateColors(colorStops, t, smoothness = 0.5) {
  // Find the two color stops that t falls between
  let start = colorStops[0];
  let end = colorStops[colorStops.length - 1];
  
  for (let i = 0; i < colorStops.length - 1; i++) {
    if (t >= colorStops[i].position && t <= colorStops[i + 1].position) {
      start = colorStops[i];
      end = colorStops[i + 1];
      break;
    }
  }
  
  // Normalize t to the range between these two stops
  const normalizedT = (t - start.position) / (end.position - start.position);
  
  // Apply smoothness (easing function)
  const easedT = applyEasing(normalizedT, smoothness);
  
  // Interpolate between the two colors
  return p5.lerpColor(p.color(start.color), p.color(end.color), easedT);
}
```

## Known Challenges

1. **P5.js and Vue Integration**:
   - P5.js was designed for global scope, not component-based architecture
   - Solution: Use instance mode and proper lifecycle management

2. **Performance Optimization**:
   - Gradient rendering can be CPU-intensive
   - Solution: Limit unnecessary redraws, use appropriate frame rates, enable GPU acceleration

3. **Responsive Canvas**:
   - Canvas needs to resize with the window
   - Solution: Use `@vueuse/core` for reactive dimensions and P5's `windowResized()`

4. **Multiple Color Stops**:
   - Interpolating between multiple colors is more complex than two colors
   - Solution: Implement multi-step interpolation algorithm with position-based blending

5. **Touch Interaction for Mesh Editing**:
   - Mobile touch events require different handling than mouse events
   - Solution: Implement touch event handlers with appropriate hit testing

6. **60 FPS Performance Target**:
   - Complex gradients might impact performance
   - Solution: Use WebGL mode when available, optimize rendering algorithms, implement adaptive complexity

7. **Mesh Node Selection**:
   - Selecting small nodes on mobile devices can be difficult
   - Solution: Implement larger hit areas and visual feedback for selected nodes

8. **Bilinear Interpolation**:
   - Implementing smooth color transitions between mesh nodes
   - Solution: Use bilinear interpolation for smoother gradients

## User Preferences

To be updated as we learn more about user preferences during development.

## Tool Usage Patterns

- Use Vue DevTools for debugging component state and Pinia stores
- Use browser performance tools to monitor rendering frame rates
- Use ESLint and Prettier for code quality and formatting

## Evolution of Project Decisions

This section will track key decisions and their evolution as the project progresses.

1. **Initial Architecture**: Component-based with P5.js in instance mode
2. **State Management**: Pinia with separate stores for gradient and mesh settings
3. **UI Framework**: Material UI (MUI) for consistent design elements
4. **Gradient Implementation**: Switched from linear/radial gradients to mesh-based gradient
5. **Animation Features**: Removed animation features to focus on mesh gradient implementation
6. **Rendering Optimization**: Added WebGL support for hardware acceleration

## Workflow Optimizations

- Use hot module replacement (HMR) during development
- Implement component-driven development workflow
- Test gradient rendering in isolation before integrating with UI
- Use computed properties for efficient node lookup
